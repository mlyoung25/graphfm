extends layout

block head
  title Bubble Chart - D3v4

block content
  h3 Bubble Chart - D3v4
  h4 double click to see artist info

  script(src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/save-svg-as-png/1.2.0/saveSvgAsPng.js')
  style.
    .bubble {
      fill-opacity: 1;
      stroke: #000;
      stroke-width: 1px;
    } 
    #BubbleChart div {
      background-color: white;
      color: black;
      padding: 5px;
      border-radius: 5px;
      pointer-events: none;
    }

  #BubbleChart
  script.
    // Create an array from the topArtists data.
    var topArtistsData = !{JSON.stringify(user.topArtists)};
    
    var svg = d3.select("#BubbleChart")
      .append("svg")
      .attr("width", 1500)
      .attr("height", 1200);

    var width = +svg.attr("width");
    var height = +svg.attr("height");
    var defs = svg.append('defs');
    
    topArtistsData.forEach((data, index) => {
      defs.append("pattern")
        .attr("id", "img-pattern-" + index)
        .attr("width", 1)
        .attr("height", 1)
        .append("image")
          .attr("xlink:href", data.imageUrl)
          .attr("width", data.radius * 2) 
          .attr("height", data.radius * 2);
    });

    var tooltip = d3.select("#BubbleChart")
    .append("div")
    .style("position", "absolute")
    .style("visibility", "hidden")
    .text("Default tooltip text");

    var circles = svg.selectAll("circle")
      .data(topArtistsData)
      .enter()
      .append("circle")
      .attr("id", function (d, i) { return "circle-" + i; });

    var circleAttributes = circles
      .attr("cx", function (d) { return d.x; })
      .attr("cy", function (d) { return d.y; })
      .attr("r", function (d) { return d.radius; })
      .style("fill", function (d, i) { return "url(#img-pattern-" + i + ")"; })
      .attr("class", "bubble")
      .on("dblclick", function (d) { 
        window.location.href = "/api/lastfm?artist=" + encodeURIComponent(d.name);
      })
      .on("mouseover", function(d){ 
        d3.select(this)
          .transition()
          .duration(200)
          .attr("r", d.radius * 1.1);  // enlargement factor 1.1
        tooltip.style("visibility", "visible");
        tooltip.text(d.name + ": " + d.playcount);
      })
      .on("mousemove", function(){
        tooltip.style("top", (d3.event.pageY-10)+"px")
        .style("left",(d3.event.pageX+10)+"px");
      })
      .on("mouseout", function(d){ 
        d3.select(this)
          .transition()
          .duration(200)
          .attr("r", d.radius);
        tooltip.style("visibility", "hidden");
      });

    var simulation = d3.forceSimulation(topArtistsData)
      .force("x", d3.forceX(width / 2).strength(0.05))
      .force("y", d3.forceY(height / 2).strength(0.05))
      .force('collide', d3.forceCollide().radius(function(d) { 
        return d.radius + 1;
      }));

    circles.call(d3.drag()
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended));

    simulation.nodes(topArtistsData)
      .on('tick', ticked);

    function ticked() {
      circles
          .attr("cx", function (d) { return d.x; })
          .attr("cy", function (d) { return d.y; })
    }

    function dragstarted(d) {
      if (!d3.event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    function dragended(d) {
      if (!d3.event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }

//-
  a.button#saveButton(class="plausible-event-name=Save+Image plausible-event-type=Bubbles" href="#")
     div.fa.fa-download Save      
  script.
    document.getElementById("saveButton").addEventListener('click', function() {
      var svgElement = document.querySelector('svg');
      // Convert SVG string to data URL
      var svgData = new XMLSerializer().serializeToString(svgElement);
      var canvas = document.createElement('canvas');
      var svgSize = svgElement.getBoundingClientRect();
      canvas.width = svgSize.width;
      canvas.height = svgSize.height;
      var ctx = canvas.getContext('2d');
      var img = document.createElement('img');
      img.setAttribute("src", "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(svgData))));
      
      img.onload = function() {
          ctx.drawImage(img, 0, 0);
          var imgsrc = canvas.toDataURL("image/png");
          var a = document.createElement("a");
          a.download = "LastFMChart.png";
          a.href = imgsrc;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
      };
    });